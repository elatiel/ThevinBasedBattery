#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       1                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(78,33)
C_bat
R_0.R
R_0.T_ref
R_0.alpha
R_0.v
R_0.i
R_0.p.v
R_0.n.v
R_0.useHeatPort
R_0.T
R_0.LossPower
R_0.R_actual
R_tl.R
R_tl.T_ref
R_tl.alpha
R_tl.i
R_tl.p.v
R_tl.n.v
R_tl.useHeatPort
R_tl.T
R_tl.LossPower
R_tl.R_actual
C_tl.v
C_tl.der(v)
C_tl.i
C_tl.C
I_bat.p.i
integrator.k
integrator.use_reset
integrator.use_set
integrator.initType
integrator.y_start
integrator.y
integrator.der(y)
integrator.local_reset
integrator.local_set
SOC_to_U_bat.n
SOC_to_U_bat.u[1]
SOC_to_U_bat.tableOnFile
SOC_to_U_bat.verboseRead
SOC_to_U_bat.columns[1]
SOC_to_U_bat.smoothness
SOC_to_U_bat.extrapolation
SOC_to_U_bat.verboseExtrapolation
SOC_to_U_bat.u_min
SOC_to_U_bat.u_max
SOC_to_U_bat.tableID.id
Sum.nin
Sum.k[1]
Sum.k[2]
SOC_init.k
load.T_ref
load.alpha
load.p.v
load.useHeatPort
load.T
load.LossPower
load.R_actual
load.R
load.I_req
R_ts.R
R_ts.T_ref
R_ts.alpha
R_ts.v
R_ts.i
R_ts.useHeatPort
R_ts.T
R_ts.LossPower
R_ts.R_actual
C_ts.v
C_ts.der(v)
C_ts.i
C_ts.C
GND.p.v
GND.p.i
signalVoltage.n.v
CPUtime
EventCounter

double initialValue(78,6)
  0    3060                  0       0                  6   256   # C_bat
 -1       1                  0       0                  1   280   # R_0.R
 -1  3.0014999999999998E+02  0 1.0000000000000000E+100  1   280   # R_0.T_ref
 -1       0                  0       0                  1   280   # R_0.alpha
  0       0                  0       0                  6   256   # R_0.v
  0       0                  0       0                  6   288   # R_0.i
  0       0                  0       0                  6   260   # R_0.p.v
  0       0                  0       0                  6   260   # R_0.n.v
  0       0                  0       0                  6   769   # R_0.useHeatPort
  0  2.8814999999999998E+02  0 1.0000000000000000E+100  6   256   # R_0.T
  0       0                  0       0                  6   256   # R_0.LossPower
  0       0                  0       0                  6   256   # R_0.R_actual
 -1      50                  0       0                  1   280   # R_tl.R
 -1  3.0014999999999998E+02  0 1.0000000000000000E+100  1   280   # R_tl.T_ref
 -1       0                  0       0                  1   280   # R_tl.alpha
  0       0                  0       0                  6   256   # R_tl.i
  0 -1.0000000000000000E-04  0       0                  6   260   # R_tl.p.v
  0       0                  0       0                  6   260   # R_tl.n.v
  0       0                  0       0                  6   769   # R_tl.useHeatPort
  0  2.8814999999999998E+02  0 1.0000000000000000E+100  6   256   # R_tl.T
  0       0                  0       0                  6   256   # R_tl.LossPower
  0       0                  0       0                  6   256   # R_tl.R_actual
 -1       0                  0       0                  2   280   # C_tl.v
  0       0                  0       0                  3   256   # C_tl.der(v)
  0       0                  0       0                  6   256   # C_tl.i
 -1    5000                  0 1.0000000000000000E+100  1   280   # C_tl.C
  0       0                  0       0                  6   388   # I_bat.p.i
  0  3.2679738562091501E-04  0       0                  6   256   # integrator.k
  0       0                  0       0                  6   769   # integrator.use_reset
  0       0                  0       0                  6   769   # integrator.use_set
  0       3                  1       4                  6   258   # integrator.initType
 -1       0                  0       0                  1   280   # integrator.y_start
 -1       0                  0       0                  2   272   # integrator.y
  0       0                  0       0                  3   256   # integrator.der(y)
  0       0                  0       0                  6   769   # integrator.local_reset
  0       0                  0       0                  6   768   # integrator.local_set
  0       1                  0       0                  6   258   # SOC_to_U_bat.n
  0       0                  0       0                  6   256   # SOC_to_U_bat.u[1]
  0       1                  0       0                  6   257   # SOC_to_U_bat.tableOnFile
 -1       1                  0       0                  1   281   # SOC_to_U_bat.verboseRead
  0       2                  0       0                  6   258   # SOC_to_U_bat.columns[1]
  0       1                  1       5                  6   258   # SOC_to_U_bat.smoothness
  0       2                  1       4                  6   258   # SOC_to_U_bat.extrapolation
  0       0                  0       0                  6   257   # SOC_to_U_bat.verboseExtrapolation
  0       0                  0       0                  6   256   # SOC_to_U_bat.u_min
  0       0                  0       0                  6   256   # SOC_to_U_bat.u_max
  0       0                  0       0                  6  1282   # SOC_to_U_bat.tableID.id
  0       2                  0       0                  6   258   # Sum.nin
 -1       1                  0       0                  1   280   # Sum.k[1]
 -1      -1                  0       0                  1   280   # Sum.k[2]
 -1       1                  0       0                  1   280   # SOC_init.k
 -1  3.0014999999999998E+02  0 1.0000000000000000E+100  1   280   # load.T_ref
 -1       0                  0       0                  1   280   # load.alpha
  0       0                  0       0                  6   260   # load.p.v
  0       0                  0       0                  6   769   # load.useHeatPort
  0  2.8814999999999998E+02  0 1.0000000000000000E+100  6   256   # load.T
  0       0                  0       0                  6   256   # load.LossPower
  0       0                  0       0                  6   256   # load.R_actual
  0       0                  0       0                  6   256   # load.R
 -1       2                  0       0                  1   280   # load.I_req
 -1      50                  0       0                  1   280   # R_ts.R
 -1  3.0014999999999998E+02  0 1.0000000000000000E+100  1   280   # R_ts.T_ref
 -1       0                  0       0                  1   280   # R_ts.alpha
  0       0                  0       0                  6   256   # R_ts.v
  0       0                  0       0                  6   256   # R_ts.i
  0       0                  0       0                  6   769   # R_ts.useHeatPort
  0  2.8814999999999998E+02  0 1.0000000000000000E+100  6   256   # R_ts.T
  0       0                  0       0                  6   256   # R_ts.LossPower
  0       0                  0       0                  6   256   # R_ts.R_actual
 -1       0                  0       0                  2   280   # C_ts.v
  0       0                  0       0                  3   256   # C_ts.der(v)
  0       0                  0       0                  6   256   # C_ts.i
 -1     500                  0 1.0000000000000000E+100  1   280   # C_ts.C
  0       0                  0       0                  6   260   # GND.p.v
  0       0                  0       0                  6   388   # GND.p.i
  0       0                  0       0                  6   260   # signalVoltage.n.v
  0       0                  0       0                  4   256   # CPUtime
  0       0                  0       0                  4   256   # EventCounter


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(78,111)

Resistance at temperature T_ref [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Resistance at temperature T_ref [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Voltage drop of the two pins (= p.v - n.v) [V]
der(Voltage drop of the two pins (= p.v - n.v)) [V/s]
Current flowing from pin p to pin n [A]
Capacitance [F]
Current flowing into the pin [A]
Integrator gain [1]
=true, if reset port enabled [:#(type=Boolean)]
=true, if set port enabled and used as reinitialization value when reset [:#(type=Boolean)]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state) [C]
Connector of Real output signal [C]
der(Connector of Real output signal) [A]
[:#(type=Boolean)]

Number of inputs (= number of outputs) [:#(type=Integer)]
Connector of Real input signals
= true, if table is defined on file or in function usertab [:#(type=Boolean)]
= true, if info message that file is loading is to be printed [:#(type=Boolean)]
Columns of table to be interpolated [:#(type=Integer)]
Smoothness of table interpolation [:#(type=Modelica.Blocks.Types.Smoothness)]
Extrapolation of data outside the definition range [:#(type=Modelica.Blocks.Types.Extrapolation)]
= true, if warning messages are to be printed if table input is outside the definition range [:#(type=Boolean)]
Minimum abscissa value defined in table
Maximum abscissa value defined in table
[:#(type=Integer)]
Number of inputs [:#(type=Integer)]
Optional: sum coefficients
Optional: sum coefficients
Constant output value
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
[Ohm]
[A]
Resistance at temperature T_ref [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Voltage drop of the two pins (= p.v - n.v) [V]
der(Voltage drop of the two pins (= p.v - n.v)) [V/s]
Current flowing from pin p to pin n [A]
Capacitance [F]
Potential at the pin [V]
Current flowing into the pin [A]
Potential at the pin [V]
[s]


